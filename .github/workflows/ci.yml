name: Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      task_to_run:
        description: 'Which part of the workflow to run'
        type: choice
        options:
          - test
          - release
          - docker
        required: true
        default: 'test'
      tag_name:
        description: 'Required for "release" or "docker" task: The tag for the action (e.g., v1.0.1)'
        required: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  BINARY_NAME: vuio

jobs:
  # ===================================================================
  # Job 1: Run Tests and Checks (Push, Pull Requests, or Manual 'test' run)
  # ===================================================================
  test_and_check:
    name: Test on ${{ matrix.target }}
    # This job runs for any push, pull requests, or when manually triggered with 'test'.
    if: github.event_name == 'push' || github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.task_to_run == 'test')
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
          - runner: macos-13
            target: x86_64-apple-darwin
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - runner: windows-latest
            target: aarch64-pc-windows-msvc
          - runner: macos-14
            target: aarch64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install dependencies for ARM cross-compile (Linux)
        if: runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
      - name: Build project
        run: cargo build --target ${{ matrix.target }}

  # ===================================================================
  # Job 2: Build Release Artifacts (No longer depends on tests)
  # ===================================================================
  build_release_artifacts:
    name: Build release for ${{ matrix.target }}
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.task_to_run == 'release')
    # This job no longer depends on test_and_check
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            os-arch: linux-x86_64
            asset_ext: .tar.gz
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            os-arch: windows-x86_64
            asset_ext: .exe
          - runner: macos-13
            target: x86_64-apple-darwin
            os-arch: macos-x86_64
            asset_ext: .tar.gz
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            os-arch: linux-arm64
            asset_ext: .tar.gz
          - runner: windows-latest
            target: aarch64-pc-windows-msvc
            os-arch: windows-arm64
            asset_ext: .exe
          - runner: macos-14
            target: aarch64-apple-darwin
            os-arch: macos-arm64
            asset_ext: .tar.gz
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install NSIS (Windows)
        if: runner.os == 'Windows'
        run: choco install nsis
      - name: Install dependencies for ARM cross-compile (Linux)
        if: runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
      - name: Package artifacts
        shell: bash
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ -z "${{ github.event.inputs.tag_name }}" ]; then
              echo "Error: The 'tag_name' input is required when running the 'release' task."
              exit 1
            fi
            VERSION_TAG="${{ github.event.inputs.tag_name }}"
          else
            VERSION_TAG="${{ github.ref_name }}"
          fi
          VERSION=${VERSION_TAG#v}
          echo "Building artifacts for version: $VERSION_TAG"
          BINARY_PATH_PREFIX="target/${{ matrix.target }}/release"
          ASSET_NAME="${{ env.BINARY_NAME }}-${{ matrix.os-arch }}${{ matrix.asset_ext }}"
          if [ "${{ runner.os }}" == "Windows" ]; then
            BINARY_FILE="${{ env.BINARY_NAME }}.exe"
            cp "$BINARY_PATH_PREFIX/$BINARY_FILE" .
            makensis -V2 -DVERSION=$VERSION -DAPP_EXE=$BINARY_FILE -DOUTFILE=$ASSET_NAME installer.nsi
          else
            tar -czf "$ASSET_NAME" -C "$BINARY_PATH_PREFIX" "${{ env.BINARY_NAME }}"
          fi
      - name: Upload artifact for release
        uses: actions/upload-artifact@v4
        with:
          name: release-artifact-${{ matrix.os-arch }}
          path: ${{ env.BINARY_NAME }}-*

  # ===================================================================
  # Job 3: Create GitHub Release
  # ===================================================================
  create_github_release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.task_to_run == 'release')
    runs-on: ubuntu-latest
    needs: build_release_artifacts
    permissions:
      contents: write

    steps:
      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts

      - name: Create GitHub Release and Upload Artifacts
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag_name || github.ref_name }}
          draft: true
          files: release-artifacts/*/*
          
  # ===================================================================
  # Job 4: Build and Push Docker Image
  # ===================================================================
  build_and_push_docker:
    name: Build and Push Docker Image
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && (github.event.inputs.task_to_run == 'release' || github.event.inputs.task_to_run == 'docker'))
    # This job no longer depends on test_and_check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine Version Tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ -z "${{ github.event.inputs.tag_name }}" ]; then
              echo "Error: The 'tag_name' input is required when running the '${{ github.event.inputs.task_to_run }}' task manually."
              exit 1
            fi
            echo "TAG=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "TAG=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.BINARY_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ steps.get_version.outputs.TAG }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.get_version.outputs.TAG }}
            type=semver,pattern={{major}},value=${{ steps.get_version.outputs.TAG }}
            type=raw,value=latest,enable=${{ startsWith(steps.get_version.outputs.TAG, 'v') }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max