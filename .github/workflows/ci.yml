name: Release

# This workflow runs on pushes to main/develop branches and on pull requests
on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*' # Also run on version tags (e.g., v1.0.0)
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # The name of your binary. This is used for packaging.
  BINARY_NAME: vuio

jobs:
  # ===================================================================
  # Job 1: Run Tests and Checks on all Platforms (for PRs and pushes)
  # ===================================================================
  test_and_check:
    name: Test on ${{ matrix.target }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # x86_64 builds
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - runner: windows-latest
            target: x86_64-pc-windows-msvc # Use MSVC for consistency
          - runner: macos-13 # x86 runner
            target: x86_64-apple-darwin
          # aarch64 (ARM) builds
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - runner: windows-latest
            target: aarch64-pc-windows-msvc # CORRECTED TARGET
          - runner: macos-14 # ARM runner (M1/M2)
            target: aarch64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies for ARM cross-compile (Linux)
        if: runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Build project
        run: cargo build --target ${{ matrix.target }}

      - name: Run tests
        run: cargo test --target ${{ matrix.target }}

  # ===================================================================
  # Job 2: Build Release Artifacts (runs ONLY on new version tags)
  # ===================================================================
  build_release_artifacts:
    name: Build release for ${{ matrix.target }}
    # This job only runs when a tag is pushed
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ${{ matrix.runner }}
    needs: test_and_check # Ensure tests pass before building release
    strategy:
      fail-fast: false
      matrix:
        include:
          # x86_64 targets
          - runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            os-arch: linux-x86_64
            asset_ext: .tar.gz
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            os-arch: windows-x86_64
            asset_ext: .exe
          - runner: macos-13 # x86 runner
            target: x86_64-apple-darwin
            os-arch: macos-x86_64
            asset_ext: .tar.gz
          # aarch64 (ARM) targets
          - runner: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            os-arch: linux-arm64
            asset_ext: .tar.gz
          - runner: windows-latest
            target: aarch64-pc-windows-msvc # CORRECTED TARGET
            os-arch: windows-arm64
            asset_ext: .exe
          - runner: macos-14 # ARM runner (M1/M2)
            target: aarch64-apple-darwin
            os-arch: macos-arm64
            asset_ext: .tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install NSIS (Windows)
        if: runner.os == 'Windows'
        run: choco install nsis

      - name: Install dependencies for ARM cross-compile (Linux)
        if: runner.os == 'Linux' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifacts
        shell: bash
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          BINARY_PATH_PREFIX="target/${{ matrix.target }}/release"
          ASSET_NAME="${{ env.BINARY_NAME }}-${{ matrix.os-arch }}${{ matrix.asset_ext }}"

          if [ "${{ runner.os }}" == "Windows" ]; then
            BINARY_FILE="${{ env.BINARY_NAME }}.exe"
            cp "$BINARY_PATH_PREFIX/$BINARY_FILE" .
            makensis -V2 -DVERSION=$VERSION -DAPP_EXE=$BINARY_FILE -DOUTFILE=$ASSET_NAME installer.nsi
          else
            tar -czf "$ASSET_NAME" -C "$BINARY_PATH_PREFIX" "${{ env.BINARY_NAME }}"
          fi

      - name: Upload artifact for release
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: ${{ env.BINARY_NAME }}-*

  # ===================================================================
  # Job 3: Create GitHub Release (runs ONLY on new version tags)
  # ===================================================================
  create_github_release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build_release_artifacts
    permissions:
      contents: write

    steps:
      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts

      - name: Create GitHub Release and Upload Artifacts
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: release-artifacts/*