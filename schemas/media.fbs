// FlatBuffer schema for zero-copy media database
namespace MediaDB;

// Media file record optimized for zero-copy operations
table MediaFile {
    id: uint64;
    path: string;
    canonical_path: string;
    filename: string;
    size: uint64;
    modified: uint64;  // Unix timestamp
    mime_type: string;
    duration: uint64;  // Duration in milliseconds, 0 if not applicable
    title: string;
    artist: string;
    album: string;
    genre: string;
    track_number: uint32;
    year: uint32;
    album_artist: string;
    created_at: uint64;  // Unix timestamp
    updated_at: uint64;  // Unix timestamp
}

// Batch container for multiple media files
table MediaFileBatch {
    files: [MediaFile];
    batch_id: uint64;
    timestamp: uint64;  // Unix timestamp when batch was created
    operation_type: BatchOperationType;
}

// Types of batch operations
enum BatchOperationType: byte {
    Insert = 0,
    Update = 1,
    Delete = 2,
    Upsert = 3
}

// Index entry for fast lookups
table IndexEntry {
    key: string;  // Path or other lookup key
    offset: uint64;  // Offset in data file
    size: uint32;  // Size of the record
}

// Index batch for efficient index updates
table IndexBatch {
    entries: [IndexEntry];
    index_type: IndexType;
    generation: uint64;  // Index generation for consistency
}

// Types of indexes
enum IndexType: byte {
    PathIndex = 0,
    DirectoryIndex = 1,
    ArtistIndex = 2,
    AlbumIndex = 3,
    GenreIndex = 4
}

// WAL (Write-Ahead Log) entry for crash recovery
table WALEntry {
    operation: WALOperation;
    timestamp: uint64;
    batch_id: uint64;
    data_offset: uint64;
    data_size: uint32;
    checksum: uint32;  // CRC32 checksum of data
}

// WAL operation types
enum WALOperation: byte {
    BatchInsert = 0,
    BatchUpdate = 1,
    BatchDelete = 2,
    IndexUpdate = 3,
    Checkpoint = 4
}

// Playlist record for zero-copy operations
table Playlist {
    id: uint64;
    name: string;
    description: string;
    created_at: uint64;  // Unix timestamp
    updated_at: uint64;  // Unix timestamp
}

// Playlist entry (track in a playlist)
table PlaylistEntry {
    id: uint64;
    playlist_id: uint64;
    media_file_id: uint64;
    position: uint32;
    created_at: uint64;  // Unix timestamp
}

// Batch container for multiple playlists
table PlaylistBatch {
    playlists: [Playlist];
    batch_id: uint64;
    timestamp: uint64;  // Unix timestamp when batch was created
    operation_type: BatchOperationType;
}

// Batch container for multiple playlist entries
table PlaylistEntryBatch {
    entries: [PlaylistEntry];
    batch_id: uint64;
    timestamp: uint64;  // Unix timestamp when batch was created
    operation_type: BatchOperationType;
}

// Database header for file format identification
table DatabaseHeader {
    magic: string;  // "MEDIADB1"
    version: uint32;
    file_size: uint64;
    index_offset: uint64;
    batch_count: uint64;
    created_at: uint64;
    last_modified: uint64;
}

// Root types for different file sections
root_type MediaFileBatch;